service: ffly-poem-dynamodb

plugins:
  - serverless-dotenv-plugin
  
provider:
  name: aws
  runtime: nodejs8.10
  region: ${env:FFLY_AWS_REGION}
  stage: ${env:STAGE}
  profile: serverless
  environment: 
    STAGE: ${env:STAGE}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: arn:aws:dynamodb:${env:FFLY_AWS_REGION}:${env:FFLY_AWS_ACCOUNT_ID}:table/${env:AWS_DYNAMODB_META_TABLE}
    - Effect: Allow
      Action:
        - es:ESHttpPost
        - es:ESHttpPut
      ## Can't use exact resource name ${env:ELASTICSEARCH_DOMAIN_NAME} because aws is dumb.
      Resource: arn:aws:es:${env:FFLY_AWS_REGION}:${env:FFLY_AWS_ACCOUNT_ID}:domain/*
      
custom:
  # This will forward all env variables to lambda.
  dotenv:
    path: /ffly-poem/ffconfig.env
    
functions:
  exportToElasticsearch:
    handler: export_to_elasticsearch.handler
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt: [ FFlyPoemDynamodbMeta, StreamArn ]

resources:
  Resources:
    FFlyPoemDynamodbMeta:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_DYNAMODB_META_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: edge
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: edge
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: index_by_edge
            KeySchema:
              - AttributeName: edge
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 1
        StreamSpecification:
            StreamViewType: NEW_IMAGE