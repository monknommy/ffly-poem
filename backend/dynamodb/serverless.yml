service: ffly-poem-dynamodb

provider:
  name: aws
  runtime: python3.6
  region: ${env:FFLY_AWS_REGION}
  stage: ${env:STAGE}
  profile: serverless
  environment: 
    STAGE: ${env:STAGE}
  iamRoleStatements:
    # Permissions for reading stream.
    - Effect: Allow
      Action:
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
        # match up format like: arn:aws:dynamodb:us-west-1:123445678:table/dev-ffly-poem-meta
      Resource: "arn:aws:dynamodb:${env:FFLY_AWS_REGION}:${env:FFLY_AWS_ACCOUNT_ID}:table/${env:AWS_DYNAMODB_META_TABLE}"

functions:
  exportToElasticsearch:
    handler: export_to_elasticsearch.handler
    events:
      - stream:
          type: dynamodb
          arn: 
            Fn::GetAtt: [ FFlyPoemDynamodbMeta, StreamArn ]

resources:
  Resources:
    FFlyPoemDynamodbMeta:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_DYNAMODB_META_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: edge
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: edge
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 2
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
          - IndexName: 'index_by_edge'
            KeySchema:
              - AttributeName: edge
                KeyType: HASH
            Projection:
              ProjectionType: 'KEYS_ONLY'
            ProvisionedThroughput:
              ReadCapacityUnits: 2
              WriteCapacityUnits: 1
        StreamSpecification:
            StreamViewType: 'NEW_IMAGE'